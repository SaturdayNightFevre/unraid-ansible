---
- name: Ensure the base Traefik directory exists
  ansible.builtin.file:
    path: "{{ app_data_dir }}/traefik"
    state: directory
    mode: '0755'


- name: Deploy the Traefik configuration using a template
  ansible.builtin.template:
    src: "traefik.yml.j2"
    dest: "{{ app_data_dir }}/traefik/traefik.yml"  # This is a file, not a directory
    owner: root
    group: root
    mode: '0644'
    backup: false

- name: Check if the acme.json file exists
  ansible.builtin.stat:
    path: "{{ app_data_dir }}/traefik/acme.json"
  register: acme_file_stat

- name: Create the acme.json file if it doesn't exist
  ansible.builtin.file:
    path: "{{ app_data_dir }}/traefik/acme.json"  # Ensure this is a file
    state: touch  # This ensures it is a file, not a directory
    owner: root
    group: root
    mode: '0600'
  when: not acme_file_stat.stat.exists

- name: Ensure Traefik container is running
  community.docker.docker_container:
    name: traefik
    image: traefik:v3.1.2
    pull: "always"
    read_only: true
    restart_policy: always
    networks:
      - name: web
    ports:
      - "81:80"
      - "440:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ app_data_dir }}/traefik/traefik.yml:/traefik.yml:ro"
      - "{{ app_data_dir }}/traefik/configs:/configs:ro"
      - "{{ app_data_dir }}/traefik/acme.json:/acme.json:rw"
      - "{{ app_data_dir }}/traefik/logs:/logs:rw"
    env:
      TZ: "{{ timezone }}"
      CF_DNS_API_TOKEN: "{{ CF_KEY }}"
    security_opts:
      - "no-new-privileges:true"
    labels:
      traefik.enable: "true"
      traefik.http.routers.traefik-dashboard.rule: "Host(`proxy.{{ DOMAIN }}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))"
      traefik.http.routers.traefik-dashboard.entrypoints: "https"
      traefik.http.routers.traefik-dashboard.service: "api@internal"
      traefik.http.routers.traefik-dashboard.tls.certresolver: "letsencrypt"
      traefik.http.middlewares.traefik-auth.basicauth.users: "{{ username }}:{{ PASSWORD_HASH }}"
      traefik.http.middlewares.traefik-dashboard-redirect.headers.customresponseheaders.X-Robots-Tag: "noindex,nofollow"
      traefik.http.routers.traefik-dashboard.middlewares: "traefik-auth, traefik-dashboard-redirect"
      net.unraid.docker.icon: "https://www.clipartmax.com/png/small/63-633339_traefik-docker-swarm-load-balancing.png"
      net.unraid.docker.managed: "dockerman"
      net.unraid.docker.webui: "https://proxy.johnflix.uk"
    log_driver: "json-file"
    log_options:
      max-file: "1"
      max-size: "10m"

- name: Ensure Pi-hole container is running
  community.docker.docker_container:
    name: pihole
    image: pihole/pihole:latest
    pull: "always"
    restart_policy: unless-stopped
    ports:
      - "82:80/tcp"
      - "53:53/tcp"
      - "53:53/udp"
      - "853:853/udp"
    volumes:
      - "{{ app_data_dir }}/pihole/etc-pihole:/etc/pihole"
      - "{{ app_data_dir }}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
    labels:
      # Unraid-specific labels
      net.unraid.docker.icon: "https://www.clipartmax.com/png/small/296-2965097_network-wide-ad-blocking-via-your-own-linux-hardware-pihole-logo.png"
      net.unraid.docker.managed: "dockerman"
      net.unraid.docker.webui: "https://pihole.johnflix.uk"

      # Enable Traefik for Pi-hole container
      traefik.enable: "true"

      # Web Interface (HTTPS) Configuration
      traefik.http.routers.pihole-router.rule: "Host(`pihole.{{ DOMAIN }}`)"
      traefik.http.routers.pihole-router.entrypoints: "https"
      traefik.http.routers.pihole-router.tls.certresolver: "letsencrypt"
      traefik.http.services.pihole.loadbalancer.server.port: "82"  # Set Pi-holeâ€™s internal web port

      # Redirect root to /admin for the Pi-hole web interface
      traefik.http.middlewares.pihole-redirect.redirectregex.regex: "^https?://([^/]+)(/)?$$"
      traefik.http.middlewares.pihole-redirect.redirectregex.replacement: "https://$1/admin/"
      traefik.http.middlewares.pihole-redirect.redirectregex.permanent: "true"
      traefik.http.routers.pihole-router.middlewares: "pihole-redirect"

      # Standard DNS over TCP (port 53)
      traefik.tcp.routers.dns.rule: "HostSNI(`*`)"  # Wildcard for regular DNS
      traefik.tcp.routers.dns.entrypoints: "dns"
      traefik.tcp.routers.dns.service: "pihole-tcp"

      # Define the TCP service for DNS (port 53)
      traefik.tcp.services.pihole-tcp.loadbalancer.server.port: "53"

      # Standard DNS over UDP (port 53)
      traefik.udp.routers.udpdns.entrypoints: "udpdns"
      traefik.udp.routers.udpdns.service: "pihole-udp"

      # Define the UDP service for DNS (port 53)
      traefik.udp.services.pihole-udp.loadbalancer.server.port: "53"

      #traefik.http.routers.traefik-dashboard.middlewares: "traefik-auth, traefik-dashboard-redirect"
    env:
      TZ: "{{ timezone }}"
      WEBPASSWORD: "{{ PASSWORD }}"
    security_opts:
      - "no-new-privileges:true"
    log_driver: "json-file"
    log_options:
      max-file: "1"
      max-size: "10m"


