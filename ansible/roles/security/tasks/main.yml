---
# Create authentik-proxy container
- name: Ensure Authentik proxy container is running
  community.docker.docker_container:
    image_name_mismatch: "recreate"
    pull: "always"
    name: authentik
    image: "ghcr.io/goauthentik/server:{{ AUTHENTIK_VERSION | default('2025.4') }}"
    command: server
    restart_policy: "unless-stopped"
    env:
      AUTHENTIK_REDIS__HOST: "{{ local_ip }}" # Using your redis container name
      AUTHENTIK_POSTGRESQL__HOST: "{{ local_ip }}" # Using your postgres container name
      AUTHENTIK_POSTGRESQL__USER: "{{ applications | selectattr('name', 'equalto', 'authentik') | map(attribute='db_user') | first }}"
      AUTHENTIK_POSTGRESQL__NAME: "{{ applications | selectattr('name', 'equalto', 'authentik') | map(attribute='db_name') | first }}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "{{ applications | selectattr('name', 'equalto', 'authentik') | map(attribute='db_password') | first }}"
      AUTHENTIK_SECRET_KEY: "{{ AUTHENTIK_SECRET_KEY | default('authentiksupersecretkey') }}"
    volumes:
      - "{{ app_data_dir }}/authentik/media:/media"
      - "{{ app_data_dir }}/authentik/custom-templates:/templates"
    ports:
      - "9000:9000"
      - "9443:9443"
    networks:
      - name: web # External network
      - name: bridge # Internal network
    labels:
      net.unraid.docker.icon: "https://github.com/goauthentik/authentik/blob/main/website/static/img/icon.png?raw=true"
      net.unraid.docker.managed: "dockerman"
      net.unraid.docker.webui: "https://authentik.{{ DOMAIN }}}"
      traefik.enable: "true"
      traefik.http.routers.authentik.rule: "Host(`authentik.{{ DOMAIN }}`) || HostRegexp(`{subdomain:[A-Za-z0-9](?:[A-Za-z0-9\\-]{0,61}[A-Za-z0-9])?}.example.com`) && PathPrefix(`/outpost.goauthentik.io/`)"
      traefik.http.services.authentik.loadbalancer.server.port: "9000"
      traefik.docker.network: "web"
      traefik.http.middlewares.authentik.forwardauth.address: "http://{{ local_ip }}:9000/outpost.goauthentik.io/auth/traefik"
      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: "X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version"
    log_driver: json-file
    log_options:
      max-file: "1"
      max-size: 10m

# Create authentik-worker container
- name: Ensure Authentik worker container is running
  community.docker.docker_container:
    image_name_mismatch: "recreate"
    pull: "always"
    name: authentik-worker
    image: "ghcr.io/goauthentik/server:{{ AUTHENTIK_VERSION | default('2025.4') }}"
    command: worker
    user: root
    restart_policy: "unless-stopped"
    env:
      net.unraid.docker.icon: "https://raw.githubusercontent.com/ibracorp/app-logos/main/authentik-worker/authentik_worker.png"
      net.unraid.docker.managed: "dockerman"
      net.unraid.docker.webui: "https://authentik.{{ DOMAIN }}}"
      AUTHENTIK_REDIS__HOST: "{{ local_ip }}" # Using your redis container name
      AUTHENTIK_POSTGRESQL__HOST: "{{ local_ip }}" # Using your postgres container name
      AUTHENTIK_POSTGRESQL__USER: "{{ applications | selectattr('name', 'equalto', 'authentik') | map(attribute='db_user') | first }}"
      AUTHENTIK_POSTGRESQL__NAME: "{{ applications | selectattr('name', 'equalto', 'authentik') | map(attribute='db_name') | first }}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "{{ applications | selectattr('name', 'equalto', 'authentik') | map(attribute='db_password') | first }}"
      AUTHENTIK_SECRET_KEY: "{{ AUTHENTIK_SECRET_KEY | default('authentiksupersecretkey') }}"
    volumes:
      - "{{ app_data_dir }}/authentik/certs:/certs"
      - "{{ app_data_dir }}/authentik/media:/media"
      - "{{ app_data_dir }}/authentik/custom-templates:/templates"
    networks:
      - name: web # External network
      - name: bridge
    log_driver: json-file
    log_options:
      max-file: "1"
      max-size: 10m

- name: Deploy Authelia config
  ansible.builtin.template:
    src: "config_auth.yml.j2"
    dest: "{{ app_data_dir }}/authelia/config/configuration.yml"
    mode: "0644"
    owner: root
    group: root

- name: Hash Authelia user passwords
  ansible.builtin.set_fact:
    authelia_hashed_users: "{{ authelia_hashed_users | default([]) + [hashed_user] }}"
  vars:
    hashed_password: "{{ lookup('pipe', 'docker run --rm authelia/authelia authelia hash-password \'' ~ item.password ~ '\'') }}"
    hashed_user: "{{ item | combine({'password': hashed_password}) }}"
  loop: "{{ authelia_users }}"

- name: Deploy Authelia users_database.yml
  ansible.builtin.template:
    src: "users_database_auth.yml.j2"
    dest: "{{ app_data_dir }}/authelia/config/users_database.yml"
    mode: "0600"
    owner: root
    group: root


# Create Authelia container
- name: Ensure Authelia container is running
  community.docker.docker_container:
    image_name_mismatch: "recreate"
    pull: always
    name: authelia
    image: "authelia/authelia:4.39"
    restart_policy: unless-stopped
    env:
      TZ: "{{ timezone }}"
    volumes:
      - "{{ app_data_dir }}/authelia/config:/config"
      - "{{ app_data_dir }}/authelia:/var/lib/authelia"
    ports:
      - "9091:9091"  # Only required if not using Traefik as reverse proxy
    networks:
      - name: web
      - name: bridge
    labels:
      net.unraid.docker.icon: "https://www.authelia.com/images/branding/logo.png"
      net.unraid.docker.managed: "dockerman"
      net.unraid.docker.webui: "https://auth.{{ DOMAIN }}"
      traefik.enable: "true"
      traefik.http.routers.authelia.rule: "Host(`auth.{{ DOMAIN }}`)"
      traefik.http.routers.authelia.entrypoints: "websecure"
      traefik.http.routers.authelia.tls: "true"
      traefik.http.services.authelia.loadbalancer.server.port: "9091"
      traefik.docker.network: "web"
    log_driver: json-file
    log_options:
      max-file: "1"
      max-size: "10m"

- name: Deploy the acquis configuration using a template
  ansible.builtin.template:
    src: "acquis.yml.j2"
    dest: "{{ app_data_dir }}/crowdsec/acquis.yaml" # This is a file, not a directory
    owner: root
    group: root
    mode: "0644"
    backup: false

# Create crowdsec container
- name: Ensure crowdsec  container is running
  community.docker.docker_container:
    image_name_mismatch: "recreate"
    pull: "always"
    name: crowdsec
    ports:
      - "9876:8080" # http api for bouncers
      - "6060:6060" # metrics endpoint for prometheus
      - "7422:7422" # appsec waf endpoint
    image: "crowdsecurity/crowdsec:v1.6.8"
    restart_policy: "unless-stopped"
    env:
      PUID: "{{ PUID }}"
      PGID: "{{ PGID }}"
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/base-http-scenarios crowdsecurity/sshd crowdsecurity/linux crowdsecurity/appsec-generic-rules crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-crs"
      CUSTOM_HOSTNAME: "johnflix-crowdsec"
    volumes:
      # crowdsec container data
      - "{{ app_data_dir }}/crowdsec/data:/var/lib/crowdsec/data"
      - "{{ app_data_dir }}/crowdsec/etc:/etc/crowdsec"
      # log bind mounts into crowdsec
      - "{{ app_data_dir }}/traefik/logs:/var/log/traefik:ro"
    networks:
      - name: web # External network
      - name: bridge
    log_driver: json-file
    log_options:
      max-file: "1"
      max-size: 10m
